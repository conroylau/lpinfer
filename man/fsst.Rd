% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fsst.R
\name{fsst}
\alias{fsst}
\title{Conducts inference using the FSST procedure}
\usage{
fsst(
  data = NULL,
  lpmodel,
  beta.tgt,
  R = 100,
  Rmulti = 1.25,
  lambda = NA,
  rho = 1e-04,
  n = NULL,
  weight.matrix = "diag",
  solver = NULL,
  progress = TRUE
)
}
\arguments{
\item{data}{Data used in the tests.}

\item{lpmodel}{The \code{lpmodel} object used in the test. The following
components are required in the \code{lpmodel} for the FSST test:
 \itemize{
   \item{\code{A.tgt}}
   \item{\code{A.obs}}
   \item{\code{A.shp}}
   \item{\code{beta.obs}}
   \item{\code{beta.shp}}
 }}

\item{beta.tgt}{Value of beta to be tested.}

\item{R}{Number of bootstrap replications.}

\item{Rmulti}{Multiplier for the number of bootstrap replications. The
product of \code{Rmulti} and \code{R} refers to the maximum
number of bootstrap replications to be conducted if there are errors.}

\item{lambda}{Parameter used to obtain the restricted estimator
\eqn{\widehat{\bm{\beta}}^r_n}. A data-driven parameter \code{lambda} can
be included if \code{NA} is included as part of the vector for
\code{lambda}. For instance, if \code{lambda} is set as \code{c(0.1, NA)},
then both 0.1 and the data-driven \code{lambda} will be applied in the
FSST procedure. The default is to use the data-driven approach for
\code{lambda}.}

\item{rho}{Parameter used in the studentization of matrices.}

\item{n}{Sample size (only required if \code{data} is omitted in the input).}

\item{weight.matrix}{The option used in the weighting matrix. There are
three options available:
\itemize{
  \item{\code{identity} --- identity matrix}
  \item{\code{diag} --- the diagonal matrix that takes the diagonal
     elements of the inverse of the variance matrix}
  \item{\code{avar} --- inverse of the variance matrix}
}}

\item{solver}{Name of the linear and quadratic programming solver that
are used to obtain the solution to linear and quadratic programs.
The solvers supported by this package are \code{cplexAPI}, \code{gurobi},
\code{limSolve} and \code{Rcplex}.}

\item{progress}{The boolean variable for whether the progress bars should
be displayed. If it is set as \code{TRUE}, the progress bars will be
displayed while the code is running.}
}
\value{
Returns the following information:
  \item{pval}{\eqn{p}-value.}
  \item{cv.table}{Table of sample and bootstrap Cone and Range test
    statistics.}
  \item{call}{Information used to call the function.}
  \item{range}{The sample range test statistic.}
  \item{cone}{The sample cone test statistic.}
  \item{test}{Sample test statistic.}
  \item{cone.n.list}{List of bootstrap cone test statistics.}
  \item{range.n.list}{List of bootstrap range test statistics.}
  \item{solver.name}{Name of the solver used.}
  \item{rho}{Input value of rho.}
  \item{rhobar.i}{Regularization parameter used for the Cone
    studentization matrix.}
  \item{lambda.data}{Data driven \code{lambda}.}
  \item{var.method}{Method used in obtaining the asymptotic variance
    of \code{beta.obs}.}
  \item{test.logical}{Indicator variable for whether the computation has
    been conducted. If \code{test.logical} is 1, it refers to the case
    where \code{beta.tgt} is inside the logical bound. If
    \code{test.logical} is 0, it refers to the case where
    \code{beta.tgt} is outside the logical bound.}
  \item{logical.lb}{Logical lower bound.}
  \item{logical.ub}{Logical upper bound.}
  \item{df.error}{Table showing the id of the bootstrap replication(s)
    with error(s) and the corresponding error message(s).}
  \item{R.succ}{Number of successful bootstrap replications.}
}
\description{
This module conducts inference in linear programs using the
  \code{fsst} procedure by Fang, Santos, Shaikh and Torgovitsky (2020).
}
\examples{
## ========================================================================= ##
##
##  Example for the fsst function
##
##  This followings illustrate how the function can be used to compute
##  p-values using the missing data problem.
##
## ========================================================================= ##
rm(list = ls())

# ---------------- #
# Part 1: Load required packages
# ---------------- #
library(lpinfer)
library(future)

# ---------------- #
# Part 2: Data and lpmodel preparation
# ---------------- #
source("./inst/example/dgp_missingdata.R")
J <- 5
N <- 1000
data <- missingdata_draw(J = J, n = N, seed = 1, prob.obs = .5)
lpmodel.full <- missingdata_lpm(J = J, info = "full", data = data)
lpmodel.twom <- missingdata_lpm(J = J, info = "mean", data = data)

tau <- sqrt(log(N)/N)
beta.tgt <- .2
lambda <- .5
rho <- 1e-4
reps <- 100

# ---------------- #
# Part 3: Run the fsst procedure
# ---------------- #
# Example 1 - Using full information approach and gurobi solver (1 core)
set.seed(1)
plan(multisession, workers = 1)
set.seed(1)
fsst.full1 <- fsst(data = sampledata,
                   lpmodel = lpmodel.full,
                   beta.tgt = beta.tgt,
                   R = reps,
                   lambda = lambda,
                   rho = 1e-4,
                   n = nrow(sampledata),
                   weight.matrix = "identity",
                   solver = "gurobi",
                   progress = TRUE)

# Example 2 - Using two moments approach and gurobi solver (1 core)
set.seed(1)
plan(multisession, workers = 1)
fsst.twom1 <- fsst(data = sampledata,
                   lpmodel = lpmodel.twom,
                   beta.tgt = beta.tgt,
                   R = reps,
                   lambda = lambda,
                   rho = 1e-4,
                   n = nrow(sampledata),
                   weight.matrix = "identity",
                   solver = "gurobi",
                   progress = TRUE)

# Example 3 - Using two moments approach and gurobi solver (1 core) with
# weight.matrix = "diag"
set.seed(1)
plan(multisession, workers = 1)
fsst.twom2 <- fsst(data = sampledata,
                   lpmodel = lpmodel.twom,
                   beta.tgt = beta.tgt,
                   R = reps,
                   lambda = lambda,
                   rho = 1e-4,
                   n = nrow(sampledata),
                   weight.matrix = "diag",
                   solver = "gurobi",
                   progress = TRUE)

# Example 4 - Using two moments approach and gurobi solver (1 core) with
# weight.matrix = "avar"
set.seed(1)
plan(multisession, workers = 1)
fsst.twom3 <- fsst(data = sampledata,
                   lpmodel = lpmodel.twom,
                   beta.tgt = beta.tgt,
                   R = reps,
                   lambda = lambda,
                   rho = 1e-4,
                   n = nrow(sampledata),
                   weight.matrix = "avar",
                   solver = "gurobi",
                   progress = TRUE)

# Example 5 - Using full information approach and gurobi solver (1 core)
# with multiple lambdas
set.seed(1)
fsst.full2 <- fsst(data = sampledata,
                   lpmodel = lpmodel.full,
                   beta.tgt = beta.tgt,
                   R = reps,
                   lambda = c(.1, .2, .5),
                   rho = rho,
                   n = nrow(sampledata),
                   weight.matrix = "identity",
                   solver = "gurobi",
                   progress = TRUE)

# Example 6 - Using full information approach and gurobi solver (1 core)
# with data-driven lambda
set.seed(1)
fsst.full3 <- fsst(data = sampledata,
                   lpmodel = lpmodel.full,
                   beta.tgt = beta.tgt,
                   R = reps,
                   lambda = NA,
                   rho = rho,
                   n = nrow(sampledata),
                   weight.matrix = "identity",
                   solver = "gurobi",
                   progress = TRUE)
}

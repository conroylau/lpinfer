% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dkqs.R
\name{dkqs}
\alias{dkqs}
\title{Conducts inference using the DKQS procedure}
\usage{
dkqs(
  data = NULL,
  lpmodel,
  beta.tgt,
  R = 100,
  Rmulti = 1.25,
  tau = NULL,
  n = NULL,
  solver = NULL,
  progress = TRUE
)
}
\arguments{
\item{data}{An \code{data frame} or a \code{matrix}.}

\item{lpmodel}{An \code{lpmodel} object.}

\item{beta.tgt}{The value to be tested.}

\item{R}{The number of bootstrap replications.}

\item{Rmulti}{The multiplier for the number of bootstrap replications. The
product of \code{Rmulti} and \code{R} refers to the maximum
number of bootstrap replications to be conducted if there are errors.}

\item{tau}{The value of the tuning parameter \eqn{\tau} in the DKQS
procedure. This can be a vector.}

\item{n}{The sample size. This is only required if \code{data} is omitted
in the input.}

\item{solver}{The name of the linear and quadratic programming solver that
is used to obtain the solution to linear and quadratic programs.
The solvers supported by this package are \code{cplexAPI}, \code{gurobi},
\code{limSolve} and \code{Rcplex}.}

\item{progress}{The boolean variable for whether the progress bars should
be displayed. If it is set as \code{TRUE}, the progress bars will be
displayed while the code is running.}
}
\value{
Returns the following list of outputs:
  \item{pval}{A table of \eqn{p}-values for each \eqn{\tau}.}
  \item{tau.feasible}{The list of \eqn{\tau} that are feasible.}
  \item{tau.infeasible}{The list of \eqn{\tau} that are infeasible.}
  \item{tau.max}{The maximum value of the feasible \eqn{\tau} for the
     problem.}
  \item{T.n}{The test statistic \eqn{T_n}.}
  \item{T.bs}{The list of bootstrap test statistics
     \eqn{\{\overline{T}_{n,b}(\tau_n)\}^B_{b=1}} for each \eqn{\tau}.}
  \item{solver}{The solver used.}
  \item{cv.table}{A table of critical values.}
  \item{call}{The function that has been called.}
  \item{test.logical}{An indicator variable for whether the computation has
    been conducted. If \code{test.logical} is 1, it refers to the case
    where \code{beta.tgt} is inside the logical bounds. If
    \code{test.logical} is 0, it refers to the case where
    \code{beta.tgt} is outside the logical bounds.}
  \item{logical.lb}{The logical lower bound.}
  \item{logical.ub}{The logical upper bound.}
  \item{df.error}{A table showing the id of the bootstrap replication(s)
    with error(s) and the corresponding error message(s).}
  \item{R.succ}{The number of successful bootstrap replications.}
}
\description{
This module conducts inference using the cone-tightening
  procedure proposed by Deb, Kitamura, Quah and Stoye (2018).
}
\details{
\itemize{
 \item{If the value of the test statistic \eqn{T_n} is zero, the bootstrap
   procedure will be skipped and the \eqn{p}-value is zero.}
 \item{ The following components are required in the \code{lpmodel} for the
   DKQS procedure:
   \itemize{
     \item{\code{A.tgt}}
     \item{\code{A.obs}}
     \item{\code{beta.obs}}
   }
 }
}
}
\examples{
## ========================================================================= ##
##
##  Example for the dkqs function
##
##  This followings illustrate how the function can be used to compute
##  p-values using the missing data problem.
##
## ========================================================================= ##
rm(list = ls())

# ---------------- #
# Part 1: Load packages
# ---------------- #
library(lpinfer)
library(future)

# ---------------- #
# Part 2: Data and lpmodel preparation
# ---------------- #
source("./inst/example/dgp_missingdata.R")
J <- 5
N <- 1000
data <- missingdata_draw(J = J, n = N, seed = 1, prob.obs = .5)
lpmodel.full <- missingdata_lpm(J = J, info = "full", data = data)
lpmodel.twom <- missingdata_lpm(J = J, info = "mean", data = data)

tau <- sqrt(log(N)/N)
beta.tgt <- .2
reps <- 100

# ---------------- #
# Part 3: Run the `dkqs` procedure
# ---------------- #
## Full information approach
# Example 1.1a - Using full information approach and gurobi solver (1 core)
set.seed(1)
plan(multisession, workers = 1)
full_gur <- dkqs(data = data,
                 lpmodel = lpmodel.full,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "gurobi",
                 progress = TRUE)

# Example 1.1b - Using full information approach and gurobi solver (8 cores)
set.seed(1)
plan(multisession, workers = 8)
full_gur <- dkqs(data = data,
                 lpmodel = lpmodel.full,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "gurobi",
                 progress = TRUE)

# Example 1.2 - Using full information approach and Rcplex solver
set.seed(1)
full_rcp <- dkqs(data = data,
                 lpmodel = lpmodel.full,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "Rcplex",
                 progress = TRUE)

# Example 1.3 - Using full information approach and limSolve solver
set.seed(1)
full_lim <- dkqs(data = data,
                 lpmodel = lpmodel.full,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "limSolve",
                 progress = TRUE)

## Two moments approach
# Example 2.1 - Using two moments approach and gurobi solver
set.seed(1)
twom_gur <- dkqs(data = data,
                 lpmodel = lpmodel.twom,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "gurobi",
                 progress = TRUE)

# Example 2.2 - Using two moments approach and Rcplex solver
set.seed(1)
twom_rcp <- dkqs(data = data,
                 lpmodel = lpmodel.twom,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "Rcplex",
                 progress = TRUE)

# Example 2.3 - Using two moments approach and limSolve solver
set.seed(1)
twom_lim <- dkqs(data = data,
                 lpmodel = lpmodel.twom,
                 beta.tgt = beta.tgt,
                 R = reps,
                 tau = tau,
                 solver = "limSolve",
                 progress = TRUE)
}

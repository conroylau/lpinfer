% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/invertci.R
\name{invertci}
\alias{invertci}
\title{Constructs confidence interval}
\usage{
invertci(
  f,
  farg = list(),
  alpha = 0.05,
  init.lb = NULL,
  init.ub = NULL,
  tol = 1e-04,
  max.iter = 20,
  df_ci = NULL,
  dp = 5,
  progress = TRUE
)
}
\arguments{
\item{f}{The function that represents a testing procedure.}

\item{farg}{The list of arguments to be passed to the function of testing
procedure.}

\item{alpha}{The significance level(s). This can be a vector.}

\item{init.lb}{The initial brackets to search for the lower bound. This is
not required if the \code{\link[lpinfer]{chorussell}} is used.}

\item{init.ub}{The initial brackets to search for the upper bound. This is
not required if the \code{\link[lpinfer]{chorussell}} is used.}

\item{tol}{The tolerance level in the bisection method.}

\item{max.iter}{The maximum number of iterations in the bisection method.}

\item{df_ci}{The data frame that consists the points and the corresponding
\eqn{p}-values that have been tested in the previous iterations.}

\item{dp}{The number of decimal places in the output.}

\item{progress}{The boolean variable for whether the result messages should
be displayed in the procedure of constructing confidence interval. If
it is set as \code{TRUE}, the messages are displayed throughout the
procedure. Otherwise, the messages will not be displayed.}
}
\value{
Returns the confidence interval and a data frame that contains the
   points being tested in the procedure.
   \item{pvals}{The data frame that consists of the points and the
      corresponding \eqn{p}-values that have been tested in constructing
      the confidence intervals.}
   \item{df_ub}{The data frame storing the information for the bisection
      method in each iteration when evaluating the upper bound of the
      confidence interval.}
   \item{df_lb}{The data frame storing the information for the bisection
      method in each iteration when evaluating the lower bound of the
      confidence interval.}
   \item{alpha}{The significance levels.}
   \item{tol}{The tolerance level in the bisection method.}
   \item{iter}{The total number of iterations taken.}
   \item{call}{The matched call.}
   \item{para.name}{The name of the tuning parameters involved.}
   \item{para.vals}{The values of the tuning parameters involved.}
   \item{ci}{The confidence intervals constructed.}
}
\description{
This function constructs the confidence interval using the
   bisection method.
}
\details{
The number of decimal places displayed in the messages (if
   \code{progress} is set as \code{TRUE}) is equal to the number of decimal
   places in the variable \code{tol}.
}
\examples{
## ========================================================================= ##
##
##  Example for the invertci function
##
##  This followings illustrate how the function can be used to construct
##  confidence intervals for the target parameter under different procedures.
##  The missing data problem is used with the subsampling procedure in
##  constructing the confidence intervals.
##
## ========================================================================= ##
rm(list = ls())

# ---------------- #
# Part 1: Load required packages
# ---------------- #
library(lpinfer)
library(future)

# ---------------- #
# Part 2: Data, lpmodel preparation and arguments for estbounds
# ---------------- #
source("./inst/example/dgp_missingdata.R")
J <- 5
N <- 1000
data <- missingdata_draw(J = J, n = N, seed = 1, prob.obs = .5)
lpmodel.full <- missingdata_lpm(J = J, info = "full", data = data)

tau <- sqrt(log(N)/N)
beta.tgt <- .2
reps <- 100
phi <- 2/3


# Define the arguments
farg <- list(data = data,
             lpmodel = lpmodel.full,
             R = reps,
             phi = phi,
             solver = "gurobi",
             progress = FALSE)

# Example 1: Construction of one confidence interval
set.seed(1)
invertci1 <- invertci(f = subsample,
                      farg = farg,
                      alpha = 0.05,
                      init.lb = c(0, .4),
                      init.ub = c(.6, 1),
                      tol = 0.001,
                      max.iter = 50,
                      df_ci = NULL,
                      progress = FALSE)
print(invertci1)
summary(invertci1)

# Example 2: Construct a list of multiple confidence intervals
set.seed(1)
invertci2 <- invertci(f = subsample,
                      farg = farg,
                      alpha = c(0.05, 0.1, 0.2),
                      init.lb = c(0, .4),
                      init.ub = c(.6, 1),
                      tol = 0.001,
                      max.iter = 5,
                      df_ci = NULL,
                      progress = FALSE)
print(invertci2)
summary(invertci2)

# Example 3: Print only the list of selected output
summary(invertci2, alphas = .05)

# Example 4: Construction of one confidence interval by specifying one initial
# bracket only
set.seed(1)
invertci4 <- invertci(f = subsample,
                      farg = farg,
                      alpha = 0.05,
                      init.lb = c(.1, .9),
                      tol = 0.001,
                      max.iter = 50,
                      df_ci = NULL,
                      progress = FALSE)
print(invertci4)
summary(invertci4)

# Example 5: Construction of one confidence interval without specifying the 
# initial brackets - the logical bounds will be used
set.seed(1)
invertci5 <- invertci(f = subsample,
                      farg = farg,
                      alpha = 0.05,
                      tol = 0.001,
                      max.iter = 50,
                      df_ci = NULL,
                      progress = FALSE)
print(invertci5)
summary(invertci5)
}

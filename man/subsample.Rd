% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subsample.R
\name{subsample}
\alias{subsample}
\title{Conducts inference using the subsampling procedure}
\usage{
subsample(
  data = NULL,
  lpmodel,
  beta.tgt,
  R = 100,
  Rmulti = 1.25,
  norm = 2,
  phi = 2/3,
  n = NULL,
  replace = FALSE,
  solver = NULL,
  progress = TRUE
)
}
\arguments{
\item{data}{Data used in the tests.}

\item{lpmodel}{The \code{lpmodel} object used in the test. The following
components are required in the \code{lpmodel} for the subsampling test:
 \itemize{
   \item{\code{A.tgt}}
   \item{\code{A.obs}}
   \item{\code{A.shp}}
   \item{\code{beta.obs}}
   \item{\code{beta.shp}}
 }
matrix of the estimator \eqn{\hat{\bm{\beta}}_{\mathrm{obs}}}.}

\item{beta.tgt}{Value of beta to be tested.}

\item{R}{Number of bootstrap replications.}

\item{Rmulti}{Multiplier for the number of bootstrap replications. The
product of \code{Rmulti} and \code{R} refers to the maximum
number of bootstrap replications to be conducted if there are errors.}

\item{norm}{Norm used in the optimization problem. It can be either a 1-norm
or a 2-norm.}

\item{phi}{Tuning parameter for the subsampling test. The size of each
subsample is \eqn{n^\phi} where \eqn{\phi \in [0,1]}.}

\item{n}{Sample size (only required if \code{data} is omitted in the input).}

\item{replace}{Boolean variable to indicate whether the function samples
the data with or without replacement.}

\item{solver}{Name of the linear and quadratic programming solver that
are used to obtain the solution to linear and quadratic programs.
The solvers supported by this package are \code{cplexAPI}, \code{gurobi},
\code{limSolve} and \code{Rcplex}.}

\item{progress}{The boolean variable for whether the progress bars should
be displayed. If it is set as \code{TRUE}, the progress bars will be
displayed while the code is running.}
}
\value{
Returns a list of output calculated from the function:
  \item{pval}{\eqn{p}-value.}
  \item{T.n}{Test statistic \eqn{T_n}.}
  \item{T.bs}{List of bootstrap estimates of the test statistics
    from the subsampling procedure.}
  \item{solver}{Solver used.}
  \item{cv.table}{Table of critical values.}
  \item{call}{The function that has been called.}
  \item{phi}{The \eqn{\phi} parameter used.}
  \item{norm}{Norm used.}
  \item{subsample.size}{Size of subsample}
  \item{test.logical}{Indicator variable for whether the computation has
    been conducted. If \code{test.logical} is 1, it refers to the case
    where \code{beta.tgt} is inside the logical bound. If
    \code{test.logical} is 0, it refers to the case where
    \code{beta.tgt} is outside the logical bound.}
  \item{logical.lb}{Logical lower bound.}
  \item{logical.ub}{Logical upper bound.}
  \item{df.error}{Table showing the id of the bootstrap replication(s)
    with error(s) and the corresponding error message(s).}
  \item{R.succ}{Number of successful bootstrap replications.}
}
\description{
This function conducts inference and returns the
  \eqn{p}-value using the subsampling procedure.
}
\details{
There are three possible combinations for the parameters
\code{phi} and \code{replace}:
\itemize{
  \item{If \code{replace} is set as \code{FALSE}, it refers to the
    subsampling procedure. In this case, \code{phi} has to be inside the
    interval \eqn{(0, 1)}.}
  \item{If \code{replace} is set as \code{TRUE} and \code{phi} is set as 1,
    then it refers to the bootstrap procedure.}
  \item{If \code{replace} is set as \code{TRUE} and \code{phi} is inside the
    interval \eqn{(0, 1)}, then it refers to the \eqn{m} out of \eqn{n}
    bootstrap procedure, where \eqn{m} is the size of the subsample and
    \eqn{n} is the total number of observations.}
}
}
\examples{
## ========================================================================= ##
##
##  Example for the subsample function
##
##  This followings illustrate how the function can be used to compute
##  p-values using the missing data problem.
##
## ========================================================================= ##
rm(list = ls())

# ---------------- #
# Part 1: Load required packages
# ---------------- #
library(lpinfer)
library(future)

# ---------------- #
# Part 2: Data and lpmodel preparation
# ---------------- #
source("./example/dgp_missingdata.R")
J <- 5
N <- 1000
data <- missingdata_draw(J = J, n = N, seed = 1, prob.obs = .5)
lpmodel.full <- missingdata_lpm(J = J, info = "full", data = data)
lpmodel.twom <- missingdata_lpm(J = J, info = "mean", data = data)

tau <- sqrt(log(N)/N)
beta.tgt <- .2
reps <- 100
phi <- 2/3

# ---------------- #
# Part 3: Run the subsampling procedure
# ---------------- #
## Full information approach
# Example 1.1 - Using full information approach and gurobi solver (1 core)
set.seed(1)
plan(multisession, workers = 1)
ss1a <- subsample(data = data,
                  lpmodel = lpmodel.full,
                  beta.tgt = beta.tgt,
                  R = 100,
                  solver = "gurobi",
                  norm = 2,
                  phi = phi,
                  replace = FALSE,
                  progress = FALSE)

# Example 1.2 - Using full information approach and gurobi solver (8 cores)
set.seed(1)
plan(multisession, workers = 8)
ss1b <- subsample(data = data,
                  lpmodel = lpmodel.full,
                  beta.tgt = beta.tgt,
                  R = 100,
                  solver = "gurobi",
                  norm = 2,
                  phi = phi,
                  replace = FALSE,
                  progress = FALSE)

# Example 1.3 - Using two moments approach and gurobi solver
set.seed(1)
ss1c <- subsample(data = data,
                  lpmodel = lpmodel.twom,
                  beta.tgt = beta.tgt,
                  R = 100,
                  solver = "gurobi",
                  norm = 2,
                  phi = phi,
                  replace = FALSE,
                  progress = FALSE)

## Two moments approach
# Example 2.1 - Using the two moments approach with bootstrap
# (i.e. replace and phi = 1)
set.seed(1)
ss2a <- subsample(data = data,
                  lpmodel = lpmodel.twom,
                  beta.tgt = beta.tgt,
                  R = 100,
                  solver = "gurobi",
                  norm = 2,
                  phi = 1,
                  replace = TRUE,
                  progress = FALSE)

# Example 3.1 - Using the two moments approach with m out of n bootstrap
# (i.e. replace and phi != 1)
set.seed(1)
ss3a <- subsample(data = data,
                  lpmodel = lpmodel.twom,
                  beta.tgt = beta.tgt,
                  R = 100,
                  solver = "gurobi",
                  norm = 2,
                  phi = .5,
                  replace = TRUE,
                  progress = FALSE)
}

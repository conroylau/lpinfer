# Generated by roxygen2: do not edit by hand

S3method(sigma,est)
S3method(sigma,est.parallel)
S3method(sigma,summation)
S3method(sigma,summation.parallel)
export(beta.bs)
export(beta.bs.parallel)
export(beta.r.compute)
export(beta.star.qp)
export(bisec.eval)
export(bisec.print)
export(check.Ab)
export(check.boolean)
export(check.cores)
export(check.dataframe)
export(check.func)
export(check.lpmodel)
export(check.lpobjects)
export(check.matrix)
export(check.norm)
export(check.numeric)
export(check.numrange)
export(check.positiveinteger)
export(check.solver)
export(check.vector)
export(ci.bisection)
export(ci.inout)
export(cplexapi.optim)
export(decimal.places)
export(dkqs)
export(dkqs.check)
export(dkqs.logicalb)
export(dkqs.qlp)
export(estbounds)
export(estbounds.check)
export(estbounds.original)
export(estbounds2.L1)
export(estbounds2.L2)
export(fsst)
export(fsst.check)
export(fsst.cone.bs)
export(fsst.cone.lp)
export(fsst.pval)
export(fsst.range.bs)
export(fsst.range.lp)
export(full.beta.bs)
export(gurobi.optim)
export(invertci)
export(invertci.check)
export(limsolve.optim)
export(lpmodel)
export(lpmodel.beta.eval)
export(lpmodel.eval)
export(lpsolveapi.optim)
export(mincriterion)
export(mincriterion.check)
export(objective.function)
export(print.dkqs)
export(print.estbounds)
export(print.fsst)
export(print.invertci)
export(print.invertci_multiple)
export(print.invertci_single)
export(print.lpmodel)
export(print.mincriterion)
export(print.subsample)
export(pval)
export(quan.stat)
export(rcplex.optim)
export(standard.form)
export(subsample)
export(subsample.check)
export(subsample.manycores)
export(subsample.onecore)
export(subsample.prob)
export(summary.bisection.print)
export(summary.dkqs)
export(summary.estbounds)
export(summary.fsst)
export(summary.invertci)
export(summary.invertci_multiple)
export(summary.invertci_single)
export(summary.lpmodel)
export(summary.mincriterion)
export(summary.subsample)
export(tau_constraints)
import(Matrix)
import(boot)
import(doMC)
import(dplyr)
import(foreach)
import(modelr)
import(parallel)
